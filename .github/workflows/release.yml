name: Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      prs_created: ${{ steps.release.outputs.prs_created }}
      pr: ${{ steps.release.outputs.pr }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json
          
  # Update uv.lock when Release Please creates/updates a PR
  update-lock-file:
    needs: release-please
    if: ${{ needs.release-please.outputs.prs_created == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
        with:
          # Use the token to allow pushing to protected branches
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract PR info
        id: pr-info
        run: |
          # Parse the PR JSON to get branch and number
          echo '${{ needs.release-please.outputs.pr }}' > pr.json
          PR_BRANCH=$(jq -r '.head.ref' pr.json)
          PR_NUMBER=$(jq -r '.number' pr.json)
          echo "branch=$PR_BRANCH" >> $GITHUB_OUTPUT
          echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "Detected release PR #$PR_NUMBER on branch $PR_BRANCH"
          
      - name: Checkout release branch
        run: |
          git fetch origin ${{ steps.pr-info.outputs.branch }}
          git checkout ${{ steps.pr-info.outputs.branch }}
          
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
          
      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
          
      - name: Update lock file
        run: |
          echo "Updating uv.lock to match version bump..."
          # Backup current lock file to compare
          cp uv.lock uv.lock.backup
          
          # Update the lock file
          uv lock
          
          # Check if lock file changed
          if ! diff -q uv.lock uv.lock.backup > /dev/null; then
            echo "Lock file was updated"
            echo "lock_updated=true" >> $GITHUB_ENV
          else
            echo "Lock file unchanged"
            echo "lock_updated=false" >> $GITHUB_ENV
          fi
          
      - name: Commit updated lock file
        if: env.lock_updated == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add uv.lock
          git commit -m "chore: update uv.lock after version bump

          Automatically updated by Release Please workflow to ensure
          lock file matches the new version in pyproject.toml."
          
          git push origin ${{ steps.pr-info.outputs.branch }}
          
          echo "Updated uv.lock committed to PR #${{ steps.pr-info.outputs.number }}"
          
      - name: Comment on PR
        if: env.lock_updated == 'true'
        uses: actions/github-script@v8
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: ${{ steps.pr-info.outputs.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸ”„ **Lock file updated**\n\nThe `uv.lock` file has been automatically updated to match the version bump in this release.\n\n_This comment was generated by the Release Please workflow._'
            })
            
  # Build and validate package when a release is created
  build:
    needs: release-please
    if: ${{ needs.release-please.outputs.release_created }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"
          
      - name: Install uv
        uses: astral-sh/setup-uv@v7
        
      - name: Create virtual environment
        run: uv venv
        
      - name: Build package
        run: |
          uv pip install build
          uv run python -m build
          
      - name: Validate built distributions
        run: |
          echo "Built packages:"
          ls -la dist/
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v5
        with:
          name: python-packages
          path: dist/
          
      # TODO: When ready to publish to PyPI, uncomment below
      # - name: Publish to PyPI
      #   uses: pypa/gh-action-pypi-publish@release/v1
      #   with:
      #     skip-existing: true